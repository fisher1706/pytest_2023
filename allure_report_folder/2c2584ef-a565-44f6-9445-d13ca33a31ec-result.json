{"name": "test_try_to_add_test_data_new", "status": "broken", "statusDetails": {"message": "sqlalchemy.exc.IntegrityError: (psycopg2.errors.NotNullViolation) null value in column \"item_id\" violates not-null constraint\nDETAIL:  Failing row contains (null, manager).\n\n[SQL: INSERT INTO item_type (item_type) VALUES (%(item_type)s) RETURNING item_type.item_id]\n[parameters: {'item_type': 'manager'}]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)", "trace": "self = <sqlalchemy.engine.base.Connection object at 0x7f180d513e50>, dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f180fd1be50>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7f180d537250>, statement = <sqlalchemy.dialects.postgresql.base.PGCompiler object at 0x7f180d537b80>\nparameters = [{'item_type': 'manager'}]\n\n    def _exec_single_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n        statement: Union[str, Compiled],\n        parameters: Optional[_AnyMultiExecuteParams],\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for a single DBAPI\n        cursor.execute() or cursor.executemany() call.\n    \n        \"\"\"\n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n    \n            if generic_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor, generic_setinputsizes, context\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e, str(statement), parameters, None, context\n                    )\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters: Optional[_AnyExecuteParams]\n    \n        if not context.executemany:\n            effective_parameters = parameters[0]\n        else:\n            effective_parameters = parameters\n    \n        if self._has_events or self.engine._has_events:\n            for fn in self.dispatch.before_cursor_execute:\n                str_statement, effective_parameters = fn(\n                    self,\n                    cursor,\n                    str_statement,\n                    effective_parameters,\n                    context,\n                    context.executemany,\n                )\n    \n        if self._echo:\n            self._log_info(str_statement)\n    \n            stats = context._get_cache_stats()\n    \n            if not self.engine.hide_parameters:\n                self._log_info(\n                    \"[%s] %r\",\n                    stats,\n                    sql_util._repr_params(\n                        effective_parameters,\n                        batches=10,\n                        ismulti=context.executemany,\n                    ),\n                )\n            else:\n                self._log_info(\n                    \"[%s] [SQL parameters hidden due to hide_parameters=True]\",\n                    stats,\n                )\n    \n        evt_handled: bool = False\n        try:\n            if context.execute_style is ExecuteStyle.EXECUTEMANY:\n                effective_parameters = cast(\n                    \"_CoreMultiExecuteParams\", effective_parameters\n                )\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_executemany:\n                        if fn(\n                            cursor,\n                            str_statement,\n                            effective_parameters,\n                            context,\n                        ):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n                    self.dialect.do_executemany(\n                        cursor,\n                        str_statement,\n                        effective_parameters,\n                        context,\n                    )\n            elif not effective_parameters and context.no_parameters:\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_execute_no_params:\n                        if fn(cursor, str_statement, context):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n                    self.dialect.do_execute_no_params(\n                        cursor, str_statement, context\n                    )\n            else:\n                effective_parameters = cast(\n                    \"_CoreSingleExecuteParams\", effective_parameters\n                )\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_execute:\n                        if fn(\n                            cursor,\n                            str_statement,\n                            effective_parameters,\n                            context,\n                        ):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n>                   self.dialect.do_execute(\n                        cursor, str_statement, effective_parameters, context\n                    )\n\n.venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1969: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f180fd1be50>, cursor = <cursor object at 0x7f180d7dd3f0; closed: -1>\nstatement = 'INSERT INTO item_type (item_type) VALUES (%(item_type)s) RETURNING item_type.item_id', parameters = {'item_type': 'manager'}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7f180d537250>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.NotNullViolation: null value in column \"item_id\" violates not-null constraint\nE       DETAIL:  Failing row contains (null, manager).\n\n.venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py:922: NotNullViolation\n\nThe above exception was the direct cause of the following exception:\n\nget_db_session = <sqlalchemy.orm.session.Session object at 0x7f180d5374f0>, get_item_type_generator = <src.generators.item_type_generator.ItemsTypeBuilder object at 0x7f180d537760>\nget_add_method = <function add_method at 0x7f180f98b910>, get_delete_method = <function delete_test_data at 0x7f180f98b880>\n\n    @pytest.fixture()\n    def generate_item_type(get_db_session, get_item_type_generator, get_add_method, get_delete_method):\n        item = tables.ItemType(**get_item_type_generator.build())\n>       get_add_method(get_db_session, item)\n\ntests/conftest.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/conftest.py:69: in add_method\n    session.commit()\n.venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py:1969: in commit\n    trans.commit(_to_root=True)\n.venv/lib/python3.10/site-packages/sqlalchemy/orm/state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n.venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py:1256: in commit\n    self._prepare_impl()\n.venv/lib/python3.10/site-packages/sqlalchemy/orm/state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n.venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py:1231: in _prepare_impl\n    self.session.flush()\n.venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py:4312: in flush\n    self._flush(objects)\n.venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py:4447: in _flush\n    with util.safe_reraise():\n.venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\n.venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py:4408: in _flush\n    flush_context.execute()\n.venv/lib/python3.10/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute\n    rec.execute(self)\n.venv/lib/python3.10/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\n.venv/lib/python3.10/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj\n    _emit_insert_statements(\n.venv/lib/python3.10/site-packages/sqlalchemy/orm/persistence.py:1227: in _emit_insert_statements\n    result = connection.execute(\n.venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1416: in execute\n    return meth(\n.venv/lib/python3.10/site-packages/sqlalchemy/sql/elements.py:517: in _execute_on_connection\n    return connection._execute_clauseelement(\n.venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1639: in _execute_clauseelement\n    ret = self._execute_context(\n.venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1848: in _execute_context\n    return self._exec_single_context(\n.venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1988: in _exec_single_context\n    self._handle_dbapi_exception(\n.venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:2344: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n.venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1969: in _exec_single_context\n    self.dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f180fd1be50>, cursor = <cursor object at 0x7f180d7dd3f0; closed: -1>\nstatement = 'INSERT INTO item_type (item_type) VALUES (%(item_type)s) RETURNING item_type.item_id', parameters = {'item_type': 'manager'}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7f180d537250>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.NotNullViolation) null value in column \"item_id\" violates not-null constraint\nE       DETAIL:  Failing row contains (null, manager).\nE       \nE       [SQL: INSERT INTO item_type (item_type) VALUES (%(item_type)s) RETURNING item_type.item_id]\nE       [parameters: {'item_type': 'manager'}]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\n.venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py:922: IntegrityError"}, "start": 1709643072577, "stop": 1709643072577, "uuid": "23ff7d79-e100-46a3-a041-67ea35b5ff96", "historyId": "58a216dbd425f33d9314c27e5e8d36dc", "testCaseId": "c008cc303f184c2456f947366c424d38", "fullName": "tests.something.test_something#test_try_to_add_test_data_new", "labels": [{"name": "parentSuite", "value": "tests.something"}, {"name": "suite", "value": "test_something"}, {"name": "host", "value": "fisher-P55A-UD3"}, {"name": "thread", "value": "38528-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.something.test_something"}]}